#include "../Cloth/SharedStructures.usf"

float DeltaTime;
float3 Wind;
float AirDensity;

StructuredBuffer<FParticleGPU> Particles;
RWStructuredBuffer<FParticleGPU> RWParticles;

[numthreads(64, 1, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= Particles.GetDimensions()) return;

    FParticleGPU P = Particles[i];
    float3 windDir = normalize(Wind);
    float windSpeed = length(Wind);

    float AoA = acos(dot(windDir, normalize(P.Normal)));
    AoA = clamp(AoA, -PI / 2.0, PI / 2.0);

    float Cl = 2.0 * sin(AoA) * cos(AoA);
    float Cd = 0.1 + 0.2 * pow(sin(AoA), 2.0);

    float q = 0.5 * AirDensity * windSpeed * windSpeed;
    float lift = q * Cl * P.Area;
    float drag = q * Cd * P.Area;

    float3 liftVec = normalize(cross(windDir, float3(0, 0, 1))) * lift;
    float3 dragVec = -windDir * drag;
    float3 force = (liftVec + dragVec) / max(P.Mass, 0.001);

    float3 newPos = P.Position + (P.Position - P.PrevPosition) + force * DeltaTime * DeltaTime;

    P.PrevPosition = P.Position;
    P.Position = newPos;
    P.Velocity = (newPos - P.PrevPosition) / DeltaTime;

    RWParticles[i] = P;
}
