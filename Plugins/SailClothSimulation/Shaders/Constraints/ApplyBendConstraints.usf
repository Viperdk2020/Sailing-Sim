// ApplyBendConstraints.usf

#include "/Engine/Public/Platform.ush"



    float DeltaTime;
    float Compliance;
    float BendStiffness;



struct FParticleGPU
{
    float3 Position;
    float3 PrevPosition;
    float3 Velocity;
    float Mass;
};

StructuredBuffer<FParticleGPU> Particles;
RWStructuredBuffer<FParticleGPU> RWParticles;
StructuredBuffer<int2> BendConstraints;
StructuredBuffer<float> BendRestAngles;


[numthreads(64, 1, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;

    uint count, stride;
    BendConstraints.GetDimensions(count, stride);
    if (i >= count)
        return;

    int2 c = BendConstraints[i];
    float r = BendRestAngles[i];

    FParticleGPU A = Particles[c.x];
    FParticleGPU B = Particles[c.y];

    float3 d = B.Position - A.Position;
    float3 dir = normalize(d);

    float angle = acos(dot(dir, float3(0, 1, 0)));
    float err = angle - r;
    float corr = err * BendStiffness;

    float w1 = (A.Mass > 0) ? 1.0 / A.Mass : 0.0;
    float w2 = (B.Mass > 0) ? 1.0 / B.Mass : 0.0;
    float cf = Compliance / (DeltaTime * DeltaTime);
    float adj = corr / (w1 + w2 + cf);
    float3 cv = normalize(cross(dir, float3(0, 1, 0))) * adj;

    if (A.Mass > 0)
        A.Position += cv * w1;
    if (B.Mass > 0)
        B.Position -= cv * w2;

    RWParticles[c.x] = A;
    RWParticles[c.y] = B;
}
